#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

template <typename T>
class node {
public:
	T data;
	node *left, *right, *parent;
	
	node() {
		left = right = parent = NULL;
	}
};

template <typename T>
class BinaryTree {
public:
	node<T> *root;

	BinaryTree() {
		root = NULL;
	}

	void _insert(T a, node<T> *n) {
		if (root) {
			if (a < n->data) {
				if (n->left)
					_insert(a, n->left);
				else {
					node<T> *leaf = new node<T>();
					leaf->data = a;
                    leaf->parent = n;
					n->left = leaf;
				}
			}
			else {
				if (n->right)
					_insert(a, n->right);
				else {
					node<T> *leaf = new node<T>();
					leaf->data = a;
                    leaf->parent = n;
					n->right = leaf;
				}
			}
		}
		else {
			node<T> *leaf = new node<T>();
			leaf->data = a;
			root = leaf;
		}

	}

	void insert(T a) {
		_insert(a, root);
	}
    
    void MakeTree(node<T> *n, vector<T> in, vector<T> pre, int inStart, int inEnd, int preStart, int preEnd) {
        if (n) {
            for (int i = inStart; i < inEnd; i++) {
                if (in[i] == pre[preStart]) {
                    if (i > inStart && pre[preStart + 1] < n->data) {
                        node<T> *leftNode = new node<T>();
                        leftNode->data = pre[preStart + 1];
                        n->left = leftNode;

                        cout << "left-> " << leftNode->data << "  inStart= " << inStart << "  inEnd= " << i << "  preStart= " << preStart + 1 << "  preEnd= " << preStart + 1 + (i-inStart) << "  n= " << n->data << "  i= " << i << endl;       

                        MakeTree(leftNode, in, pre, inStart, i, preStart + 1, preStart + 1 + (i-inStart));
                    }

                    if (inEnd > i+1 && pre[preEnd - (inEnd - i - 1)] >= n->data) {
                        node<T> *rightNode = new node<T>();
                        rightNode->data = pre[preEnd - (inEnd - i - 1)];
                        n->right = rightNode;

                        cout << "right-> " << rightNode->data << "  inStart= " << i+1 << "  inEnd= " << inEnd << "  preStart= " << preEnd - (inEnd - i - 1) << "  preEnd= " << preEnd << "  n= " << n->data << "  i= " << i << endl;

                        MakeTree(rightNode, in, pre, i+1, inEnd, preEnd - (inEnd - i - 1), preEnd);
                    }
                }
            }
        }
        else {
            node<T> *roo = new node<T>();
            roo->data = pre[0];
            n = roo;
            root = n;
            MakeTree(n, in, pre, inStart, inEnd, preStart, preEnd);
        }
    }
    
    void makeNewTree(vector<T> in, vector<T> pre) {
        MakeTree(root, in, pre, 0, in.size(), 0, pre.size());
    }
};

int main() {
	vector<int> in = { 2, 5, 6, 8, 10, 13, 14, 16, 18 };
    vector<int> pre = { 10, 5, 2, 8, 6, 13, 14, 18, 16 };
	BinaryTree<int> B;
    B.makeNewTree(in, pre);
    
	return 0;
}
