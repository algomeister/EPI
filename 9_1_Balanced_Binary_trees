#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

template <typename T>
class BinaryTree {
private:
	struct node {
		T data;
		node *left, *right;
	};
	node *root;

public:
	BinaryTree() {
		root = NULL;
	}

	void _insert(T a, node *n) {
        if (root) {
            if (a < n->data) {
                if (n->left)
                    _insert(a, n->left);
                else {
                    node *leaf = new node;
                    leaf->data = a;
                    n->left = leaf;
                }
            }
            else {
                if (n->right)
                    _insert(a, n->right);
                else {
                    node *leaf = new node;
                    leaf->data = a;
                    n->right = leaf;
                }
            }
        }
        else {
            node *leaf = new node;
            leaf->data = a;
            root = leaf;
        }
        
	}

	void insert(T a) {
		_insert(a, root);
	}
    int height(){
        return height(root);
    }

	int height(node *n) {
		if (n)
			return max(height(n->left), height(n->right)) + 1;
		else
			return -1;
	}

	bool checkBalance() {
		if (abs((height(root->left)) - (height(root->right))) <= 1 )
			return true;
		return false;
	}
};

int main() {
	vector<int> v = { 10, 5, 15, 3, 12, 8, 1, 4, 2, 18 };
	BinaryTree<int> B;
	for (int i = 0; i < v.size(); i++) {
		B.insert(v[i]);
	}
    if(B.checkBalance())
        cout << "YES, Left and Right subtrees are balanced." << endl;
    else
        cout << "NO, Left and Right subtrees are NOT balanced." << endl;
    
	return 0;
}
